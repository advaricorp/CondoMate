# CondoMate Alpha 1.0 Documentation

## Table of Contents
1. [Project Overview](#project-overview)
2. [Architecture](#architecture)
3. [Backend Implementation](#backend-implementation)
4. [Frontend Implementation](#frontend-implementation)
5. [Security & Authentication](#security--authentication)
6. [Multi-tenancy Implementation](#multi-tenancy-implementation)
7. [Database Design](#database-design)
8. [API Documentation](#api-documentation)
9. [Deployment & Infrastructure](#deployment--infrastructure)
10. [Development Considerations](#development-considerations)
11. [Testing & Quality Assurance](#testing--quality-assurance)

## Project Overview

CondoMate is a comprehensive condominium management system designed to streamline the operations of residential complexes. The system implements a multi-tenant architecture, allowing multiple condominiums to operate independently within the same platform while maintaining data isolation and security.

### Key Features
- Multi-tenant architecture supporting multiple condominiums
- Role-based access control (RBAC)
- Secure authentication and authorization
- Document management
- Payment processing
- Calendar and event management
- Administrative dashboard
- User management

## Architecture

### System Architecture
The application follows a modern microservices-inspired architecture with the following components:

1. **Frontend (React + Vite)**
   - Single Page Application (SPA)
   - Responsive design using Tailwind CSS
   - Context-based state management
   - Protected routes and authentication

2. **Backend (FastAPI)**
   - RESTful API endpoints
   - Async/await implementation
   - MongoDB integration using Motor
   - JWT-based authentication
   - Lambda authorizer for API Gateway

3. **Database (MongoDB)**
   - Document-based storage
   - Multi-tenant data isolation
   - Indexed collections for performance
   - Beanie ODM integration

4. **AWS Infrastructure**
   - API Gateway for request handling
   - Lambda functions for authorization
   - IAM roles and policies
   - CloudWatch for monitoring

### Directory Structure
```
condomate/
├── backend/
│   ├── app/
│   │   ├── core/
│   │   │   ├── config.py
│   │   │   ├── db.py
│   │   │   └── db_init.py
│   │   ├── models/
│   │   │   ├── base.py
│   │   │   ├── tenant.py
│   │   │   └── user.py
│   │   ├── services/
│   │   │   └── user.py
│   │   └── middleware/
│   │       └── tenant.py
│   └── lambda_authorizer/
│       └── lambda_authorizer.py
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── contexts/
│   │   ├── pages/
│   │   └── services/
│   └── public/
└── docs/
    └── Alpha1.0
```

## Backend Implementation

### FastAPI Application Structure
The backend is built using FastAPI, providing high-performance async API endpoints. Key components include:

1. **Core Configuration**
```python
class Settings(BaseSettings):
    PROJECT_NAME: str = "CondoMate"
    VERSION: str = "1.0.0"
    MONGO_DB_URL: str = os.getenv("MONGO_DB_URL")
    MONGO_DB_NAME: str = os.getenv("MONGO_DB_NAME")
```

2. **Database Initialization**
```python
async def init_db():
    client = AsyncIOMotorClient(settings.MONGO_DB_URL)
    db = client[settings.MONGO_DB_NAME]
    await init_beanie(
        database=db,
        document_models=[User, Tenant]
    )
```

3. **Multi-tenant Base Model**
```python
class TenantBase(Document):
    tenant_id: str
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
```

### Lambda Authorizer
The Lambda authorizer handles request authentication and authorization:

```python
def generate_policy(principal_id, effect, resource, tenant_id=None):
    return {
        'principalId': principal_id,
        'policyDocument': {
            'Version': '2012-10-17',
            'Statement': [{
                'Action': 'execute-api:Invoke',
                'Effect': effect,
                'Resource': resource
            }]
        },
        'context': {
            'tenant_id': tenant_id
        }
    }
```

## Frontend Implementation

### React Components Structure

1. **Layout Components**
   - NavBar: Navigation and user menu
   - Layout: Page wrapper with common elements
   - Footer: Common footer component

2. **Page Components**
   - Dashboard: Main user interface
   - AdminPanel: Administrative controls
   - Calendar: Event management
   - Documents: Document management
   - Payments: Payment processing
   - Login: Authentication page

3. **Context Management**
```jsx
const AuthContext = createContext({
    isAuthenticated: false,
    user: null,
    login: () => {},
    logout: () => {}
});
```

### API Integration
```javascript
class ApiClient {
    constructor() {
        this.baseURL = import.meta.env.VITE_API_URL;
    }

    async request(endpoint, options = {}) {
        const headers = {
            'Content-Type': 'application/json',
            ...options.headers
        };

        if (this.getToken()) {
            headers.Authorization = `Bearer ${this.getToken()}`;
        }

        const response = await fetch(`${this.baseURL}${endpoint}`, {
            ...options,
            headers
        });

        return this.handleResponse(response);
    }
}
```

## Security & Authentication

### JWT Implementation
- Token-based authentication using JWT
- Refresh token mechanism
- Secure token storage in HttpOnly cookies

### IAM Roles and Policies
```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:CondoMateAuthorizer"
        }
    ]
}
```

## Multi-tenancy Implementation

### Tenant Isolation
1. **Database Level**
   - Tenant-specific collections
   - Tenant ID in every document
   - Indexed queries for performance

2. **Application Level**
   - Tenant middleware for request filtering
   - Tenant-specific configurations
   - Role-based access control

### Demo Tenant Setup
```python
async def create_demo_tenant(db):
    hogwarts_tenant = {
        "name": "Hogwarts School of Witchcraft and Wizardry",
        "description": "A magical school for wizards and witches",
        "tenant_id": "hogwarts",
        "settings": {
            "houses": ["Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"],
            "currency": "Galleons",
            "timezone": "Europe/London"
        }
    }
```

## Database Design

### Collections
1. **Users Collection**
   - Email (unique per tenant)
   - Password (hashed)
   - Role
   - Tenant ID
   - Profile information

2. **Tenants Collection**
   - Name
   - Description
   - Settings
   - Active status
   - User limit

### Indexes
```python
async def create_indexes(db):
    await db.users.create_index("email", unique=True)
    await db.users.create_index("tenant_id")
    await db.users.create_index([("tenant_id", 1), ("email", 1)], unique=True)
    await db.tenants.create_index("name", unique=True)
```

## API Documentation

### Authentication Endpoints
- POST /api/v1/auth/register
- POST /api/v1/auth/login
- POST /api/v1/auth/logout
- GET /api/v1/auth/me

### User Management
- GET /api/v1/users
- POST /api/v1/users
- PUT /api/v1/users/{id}
- DELETE /api/v1/users/{id}

### Tenant Management
- GET /api/v1/tenants
- POST /api/v1/tenants
- PUT /api/v1/tenants/{id}
- DELETE /api/v1/tenants/{id}

## Deployment & Infrastructure

### Docker Configuration
```yaml
version: '3.8'
services:
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - MONGO_DB_URL=mongodb://mongodb:27017
      - MONGO_DB_NAME=condomate

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    depends_on:
      - backend

volumes:
  mongodb_data:
```

### AWS Setup
1. API Gateway configuration
2. Lambda function deployment
3. IAM roles and policies
4. Environment variables

## Development Considerations

### Code Quality
- ESLint and Prettier configuration
- Python type hints
- Automated testing setup
- CI/CD pipeline preparation

### Security Measures
- Input validation
- XSS prevention
- CSRF protection
- Rate limiting
- Data encryption

### Performance Optimization
- Database indexing
- Caching strategies
- Code splitting
- Lazy loading

### Future Enhancements
1. Real-time notifications
2. Mobile application
3. Integration with payment gateways
4. Document OCR processing
5. Advanced reporting features

## Testing & Quality Assurance

### Test Suite
The application includes a comprehensive test suite that verifies all major components and endpoints:

1. **Health Checks**
   - Database connectivity verification
   - Service status monitoring
   - API availability checks

2. **Automated Tests**
   - Authentication flow testing
   - User management endpoints
   - Payment processing
   - Calendar operations
   - Document management
   - Multi-tenancy validation

3. **Test Features**
   - Colored progress bars
   - Detailed test reporting
   - Success/failure statistics
   - Error message highlighting

### Running Tests
```bash
# Install test dependencies
pip install -r tests/requirements-test.txt

# Run the test suite
python tests/test_suite.py
```

### Test Coverage
- Unit tests for core functionality
- Integration tests for API endpoints
- End-to-end service validation
- Multi-tenancy isolation testing

### Health Monitoring
The application provides a health check endpoint at `/api/v1/health` that returns:
```json
{
    "status": "healthy",
    "timestamp": "2024-01-20T12:00:00Z",
    "services": {
        "database": "healthy",
        "api": "healthy"
    },
    "version": "1.0.0"
}
```

### Continuous Integration
The test suite is designed to be integrated into CI/CD pipelines:
- Automated test execution
- Coverage reporting
- Performance metrics
- Security scanning

## Conclusion

CondoMate Alpha 1.0 provides a solid foundation for condominium management with its multi-tenant architecture, secure authentication system, and comprehensive feature set. The modular design allows for easy expansion and maintenance, while the security measures ensure data protection and privacy.